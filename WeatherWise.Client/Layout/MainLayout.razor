@inherits LayoutComponentBase
@inject Services.AuthService AuthService
@inject NavigationManager NavigationManager

<div class="page @themeClass">
    <!-- Header -->
    <header class="header glass-effect">
        <div class="container">
            <div class="navbar-brand">
                <a href="/">Weather Forecast</a>
            </div>
            <nav class="nav-menu">
                <NavLink href="/" Match="NavLinkMatch.All">Home</NavLink>
                @if (user != null)
                {
                    <NavLink href="/weather">Weather</NavLink>
                    <NavLink href="/dashboard">Dashboard</NavLink>
                    <button @onclick="Logout">Logout</button>
                }
                else
                {
                    <NavLink href="/dashboard">Dashboard</NavLink>
                    <NavLink href="/login">Login</NavLink>
                    <NavLink href="/signup">Sign Up</NavLink>
                }
            </nav>
            <div class="theme-toggle">
                <button class="btn btn-secondary" @onclick="ToggleTheme">
                    @if (themeClass == "light-theme")
                    {
                        <span>🌙</span> <!-- Moon for dark theme -->
                    }
                    else
                    {
                        <span>☀️</span> <!-- Sun for light theme -->
                    }
                    Change Theme
                </button>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main>
        <div class="container">
            @Body
        </div>
    </main>

    <!-- Footer -->
    <footer class="footer glass-effect">
        <div class="container">
            <p>&copy; 2025 Weather Forecast App Developed By Jaanus Sri K G. All rights reserved.</p>
            <p>Powered by <a href="https://openweathermap.org/" target="_blank">OpenWeatherMap</a> &  <a href="https://supabase.com/" target="_blank">Supabase</a></p>
        </div>
    </footer>
</div>

@code {
    private string themeClass = "light-theme";
    private Supabase.Gotrue.User? user;

    protected override async Task OnInitializedAsync()
    {
        user = await AuthService.GetUser();
        AuthService.OnAuthStateChanged += RefreshState; // Subscribe to auth state changes
    }

    private void RefreshState()
    {
        InvokeAsync(async () =>
        {
            user = await AuthService.GetUser();
            StateHasChanged(); // Force UI update
        });
    }

    private void ToggleTheme()
    {
        themeClass = themeClass == "light-theme" ? "dark-theme" : "light-theme";
    }

    private async Task Logout()
    {
        await AuthService.SignOut();
        NavigationManager.NavigateTo("/", forceLoad: true); // Force reload to update the UI
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= RefreshState; // Unsubscribe on dispose
    }
}