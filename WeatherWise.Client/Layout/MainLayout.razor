@using WeatherWise.Client.Services
@inherits LayoutComponentBase
@inject Services.AuthService AuthService
@inject NavigationManager NavigationManager

<div class="page @themeClass">
    <!-- Header -->
    <header class="header glass-effect">
        <div class="container">
            <div class="navbar-brand">
                <img src="/images/weatherWise-logo.png" alt="WeatherWise Logo" class="logo" />
                <a href="/">WeatherWise</a>
            </div>
            <nav class="nav-menu">
                <NavLink href="/" Match="NavLinkMatch.All" class="nav-link">Home</NavLink>
                @if (user != null)
                {
                    <NavLink href="/weather" class="nav-link">Weather</NavLink>
                    <NavLink href="/dashboard" class="nav-link">Dashboard</NavLink>
                    <button class="logout-btn" @onclick="Logout">
                        <span class="icon">🚪</span> Logout
                    </button>
                }
                else
                {
                    <NavLink href="/dashboard" class="nav-link">Dashboard</NavLink>
                    <NavLink href="/login" class="nav-link">Login</NavLink>
                    <NavLink href="/signup" class="nav-link">Sign Up</NavLink>
                }
            </nav>
            <div class="theme-toggle">
                <button class="theme-btn" @onclick="ToggleTheme">
                    @if (themeClass == "light-theme")
                    {
                        <span class="icon">🌙</span>
                    }
                    else
                    {
                        <span class="icon">☀️</span>
                    }
                </button>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <div class="container">
            @Body
        </div>
    </main>

 </div>

@code {
    private string themeClass = "light-theme";
    private Supabase.Gotrue.User? user;

    protected override async Task OnInitializedAsync()
    {
        user = await AuthService.GetUser();
        AuthService.OnAuthStateChanged += RefreshState;
    }

    private void RefreshState()
    {
        InvokeAsync(async () =>
        {
            user = await AuthService.GetUser();
            StateHasChanged();
        });
    }

    private void ToggleTheme()
    {
        themeClass = themeClass == "light-theme" ? "dark-theme" : "light-theme";
    }

    private async Task Logout()
    {
        await AuthService.SignOut();
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= RefreshState;
    }
}